第三章  基本概念
1.语法
  Ⅰ.ECMAScript中的一切都是区分大小写的
  Ⅱ.标识符表示变量、函数、属性的名字或者函数的参数，命名的规则如下：
    ①.第一个字符必须是字母、下划线或者美元符
    ②.其他字符可以是字符、下划线、美元符或者数字
  Ⅲ.通过字符串"use strict"来开启JavaScript的严格模式。严格模式定义了一种不同的解析与执行模型（该字符串可以放在JS文件的顶部也可以只放在某一个函数内部的上方）
2.在严格模式下，eval和arguments不能用来作为标识符或者属性名
3.js的变量是松散类型的，即可以用来保存任何类型的数据
4.定义了之后未初始化的变量的默认值未undefined
5.使用了var关键字来定义的变量是一个局部变量，没有使用var关键字直接定义的变量未全局变量。（推荐所有的变量都通过var定义，因为在严格模式下不通过var定义变量会报错）
6.ECMAScript中有五种基本类型（Undefined、Null、String、Number、Boolean）和一种复杂类型（Object）
6.可以通过typeof操作符来检测变量的数据类型，该操作符会返回以下六种字符串
  Ⅰ."undefined"===>表示这个值未定义
  Ⅱ."boolean"====>表示这个值为布尔值
  Ⅲ."string"====>表示这个值为字符串
  Ⅳ."number"====>表示这个值为数值
  Ⅴ."object"====>表示这个值为对象或者null
  Ⅵ."function"==>表示这个值为函数
  Ⅶ.注意：在Safari5及之前的版本和Chrome7及之前的版本，对正则表达式调用typeof操作符会返回"function"，但其他的浏览器会返回"object"
7.Undefined类型只有一个值就是undefined
8.对未初始化的变量和未声明的变量调用typeof操作符都会返回"undefined"
9.Null类型只有一个值就是null，表示一个空对象指针。这也是为什么typeof null的值为"object"的原因
10.undefined值是派生自null值的。所以null==undefined
11.只要意在保存对象的变量还没有真正保存对象，就应该明确的让该变量保存null值
12.Boolean类型只有两个字面值，就是true和false
13.虽然Boolean类型只有两个值，但是ECMAScript中所有类型的值都有与这两个Boolean值等价的值，可以使用Boolean()函数将值转换成对应的Boolean值
  数据类型              转换为true的值              转换为false的值
  Boolean                 true                        false
  String                任何非空字符串                ""(空字符串)
  Number            任何非零数值（包括无穷大）          0和NaN
  Object                任何对象                        null
  Undefined               不存在                     undefined
14.if语句会根据以上转换规则自动给条件执行Boolean函数
15.Number类型使用IEEE754格式来表示整数和浮点数
16.整数可以通过以下方式来表示
  Ⅰ.十进制  var num = 12;
  Ⅱ.八进制（以8为基数），第一位必须是0   var num = 070;等于十进制的56  但是八进制在严格模式下是无效的
  Ⅲ.十六进制（以16为基数），前两位必须是0x  var num = 0xA;等于十进制的10
17.在进行算数运算的时候八进制和十六进制表示的数值都会被转换为1十进制
18.浮点数就是小数，保存的时候需要的内存空间是整数的两倍
19.可以用e表示法表示浮点数中极大或者极小的数值   如: 3.125e7===31250000   3e-10 === 0.0000000003
20.浮点数值得最高精度是17位小数，所以计算精度不如整数，所以永远不要测试某个特定的浮点数值    如0.1+0.2!==0.3  这个是IEEE754格式数值的通病 
21.ECMAScript使用Number.MIN_VALUE来保存能够表示的最小数值（5e-324）,使用Number.MAX_VALUE来保存能够保存的最大的数值（1.7976931348623157e+308）
22.如果一个数值在MAX_VALUE和MIN_VALUE之外，则为无穷数，ECMAScript使用-Infinity(Number.NEGATIVE_INFINITY)来表示负无穷，使用Infinity(Number.POSITIVE_INFINITY)来表示正无穷
23.ECMAScript使用isFinite()函数来判断一个数是不是有穷数
24.如果某次计算返回了正或负的Infinity值，则无法继续参与下一次计算，因为Infinity不是能够参与计算的数值
25.非数值(NaN)是一个特殊的值，用来表示本来要返回数值的操作数未返回数值的情况
26.在ECMAScript中，任何数值除以非数值都会返回NaN，因此不会影响其他代码的运行
27.NaN本身有两个特点
  Ⅰ.任何涉及NaN的操作都会返回NaN
  Ⅱ.NaN不与任何数值相等，包括NaN本身（NaN!==NaN）
28.ECMAScript定义了isNaN()函数用来判断一个数值是不是非数值
  Ⅰ.isNaN(NaN)    //true
  Ⅱ.isNaN(10)    //false
  Ⅲ.isNaN("10")  //false(可以被转换为数字10)
  Ⅳ.isNaN("blue")//true(不可能被转换为数字)
  Ⅴ.isNaN(true)   //false(可以被转换为数字1)
29.有三个方法可以将非数值转换为数值，分别是：
  Ⅰ.转型函数Number()，可以用于任何数据类型，规则如下：
    ①.如果是Boolean值，true和false分别会被转换为1和0   Number(true)===1  Number(false)===0
    ②.如果是数值则是简单的传入和返回
    ③.如果是null值或者undefined值，则返回0   Number(null)===0  Number(undefined)===0
    ④.如果是字符串，则遵循以下规则：
      ⑴.如果字符串中只包含数字，则将其转换为十进制（字符串中的前导零会被忽略）     Number("011")===11
      ⑵.如果字符串包含有效的浮点格式，则将其转换为对应的浮点数职（也会忽略前导零） Number("01.11")===1.11
      ⑶.如果字符串中包含有效的十六进制数，则将其转换为对应的十进制数              Number("0xA")===10
      ⑷.如果字符串为空字符串，则将其转换为0                                     Number("")===0
      ⑸.如果字符串包含除上述格式外的其他字符，则将其转换为NaN                     isNaN(Number("aaa"))===true
    ⑤.如果是对象，则首先调用对象的valueOf()方法，对方法的返回值进行以上规则的转换，如果转换的结果是NaN，再调用对象的toString()方法，再次依照以上的规则进行转换
  Ⅱ.parseInt()函数，该函数会忽略字符串前面的空格，直至找到第一个非空格字符，如果第一个字符不是数字或者负号，则会返回NaN，并且在找到数字字符或者负号之后会解析到第一个非数字字符结束
  Ⅲ.parseFloat()函数，该函数是将字符串转换为浮点型数据，规则基本和parseInt()方法类似
30.parseInt()函数有两个参数，第一个参数为带转换的数据，第二个参数为转换时的基数（及进制数），因此为了避免转换错误，无论什么情况下都因该明确指定基数
31.如果要使用parseInt()函数转换八进制数据的时候，应该加上转换基数这个参数。因为ECMAScript5会将忽略八进制数据的前导零导致解析失败。而ECMAScript3没有这个问题。
32.parseFloat()函数始终会忽略前导零，并且只解析十进制数据
33.ECMAScript中的字符串是不可变的
34.再调用数值的toString()方法的时候，可以传递一个数值的基数的参数，ru：10.toString(2)==>1010
35.字符串也有转型函数String(),转换规则如下：
  Ⅰ.如果值有toString()方法，则调用该方法（没有参数）并返回相应的值
  Ⅱ.如果值是null，则返回"null"
  Ⅲ.如果值是undefined，则返回"undefined"
36.ECMAScript中的对象就是一组数据和功能的集合
37.创建对象的方式： var o = new Object(); 如果不需要给构造参数传递参数，也可以直接这样 var o = new Object;
38.Object类型是所有他的实例的基础
39.每个Object的实例都具有以下方法：
  Ⅰ.constructor:保存着用于创建当前对象的函数
  Ⅱ.hasOwnProperty(propertyName):检查给定属性是否存在于当前对象实例中（而不是存在于实例的原型中）
  Ⅲ.isPrototypeOf(object):检查传入对象是否为当前对象的原型
  Ⅳ.propertyIsEnumerable(propertyName):检查给定属性是否能够使用for-in语句
  Ⅴ.toLocalString():返回对象字符串，与执行环境所在地有关
  Ⅵ.toString():返回对象字符串
  Ⅶ.valueOf():返回对象的字符串、数值或布尔值表示（通常与同String的返回值一致）