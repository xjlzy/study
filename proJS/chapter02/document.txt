1.script标签的属性
  Ⅰ.async属性     可选  表示应立即下载该脚本，但是不影响页面中的其他操作（如下载资源或者等待加载其他脚本，只对外部脚本有效）
  Ⅱ.charset属性  可选   表示通过src属性指定的代码的字符集 （多数浏览器会忽略这个属性）
  Ⅲ.defer属性    可选  表示脚本可以延迟到文档完全解析和显示之后再执行（只对外部脚本有效）
  Ⅳ.src属性     可选   表示要加载的外部代码的路径
  Ⅴ.language属性  可选  表示标签内代码所使用的脚本语言（已废弃，因为多数的浏览器会忽略这个属性）
  Ⅵ.type属性     可选   是language属性的替代属性（非必须，默认值是text/javascript）
2.使用script标签的方式
  Ⅰ.直接在页面中嵌入JavaScript代码
  Ⅱ.引用外部JavaScript文件
3.包含再script标签内部的Javascript将被从上至下依次解释
4.在使用<script>嵌入JavaScript代码时，再代码中的任何地方都不能出现"</script>"字符串，
  因为按照解析规则，在遇到</script>时就会认为这是结束的标签，可以通过转义字符解决（"<\/script>"）。仅限在页面直接嵌入JavaScript代码时
5.在下载和解析外部JavaScript文件时，页面的处理会暂停，所以JavaScript脚本代码和文件一般会放在页面的最后，即</body>标签前面
6.带src属性的script标签中不应包含JavaScript代码，如果包含，只会下载并执行外部脚本，嵌入的代码会被忽略。
7.script元素的src属性可以包含来自外部域的Javascript文件。
8.只要不存在defer和async属性，浏览器会按照script在页面中出现的先后顺序对他们依次进行解析。
9.设置了defer属性的外部脚本会被延迟到整个页面都解析完毕之后再运行。
  （在实际使用中，使用了defer的脚本并不一定会按照顺序执行，也不一定会在DOMContentLoaded事件触发前执行，因此一个页面最好只有一个包含defer属性的延迟脚本）
10.再HTML5中，当嵌入脚本包含的defer属性时，浏览器会忽略defer属性
11.async属性只适用于加载外部脚本文件，并告诉浏览器立即下载该文件，不保证文件会按照指定的先后顺序执行
12.async属性是为了让页面在下载和执行外部的脚本时，可以同时加载页面的其他内容。所以建议异步脚本不要在加载期间操作DOM
13.加了async属性的脚本会在页面load时间前执行，但是可能会在DOMContentLoaded事件触发前或之后执行
14.最好的做法是尽可能的使用外部文件来包含JavaScript代码
15.使用<noscript>标签可以指定在不支持脚本的浏览器中显示的替代内容。该内容会在以下情况显示
  Ⅰ.浏览器不支持脚本
  Ⅱ.浏览器支持脚本但脚本被人为禁用